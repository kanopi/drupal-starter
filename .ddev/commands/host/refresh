#!/usr/bin/env bash

## Refresh DB
## Description: Downloads the database from the provider. Defaults to the primary environment but can take an environment name as a parameter.
## Usage: refresh [environment id]
## Example: ddev refresh pr-123
## Flags: [{"Name":"force","Shorthand":"f","Usage":"Force creation of new backup regardless of age"}]

green='\033[0;32m'
yellow='\033[1;33m'
red='\033[0;31m'
NC='\033[0m'
divider='===================================================\n'

# Parse command line arguments
FORCE_BACKUP=false
# Get hostingenv from web container
ENVIRONMENT=$(ddev exec printenv hostingenv 2>/dev/null)

for arg in "$@"; do
  case $arg in
    --force|-f)
      FORCE_BACKUP=true
      shift
      ;;
    *)
      # Skip DDEV internal parameters (like "2") and set environment if valid
      if [ "$arg" != "2" ] && [ -z "$ENVIRONMENT_SET" ]; then
        ENVIRONMENT="$arg"
        ENVIRONMENT_SET=true
      fi
      shift
      ;;
  esac
done

cd ${DDEV_APPROOT}

# Check if the file exists
if [ -f "config/core.extension.yml" ]; then
  echo -e "\n${yellow} Get database from Pantheon environment: ${ENVIRONMENT}. ${NC}"
  echo -e "${green}${divider}${NC}"
  # Extract site name from DDEV project name or use configured project.
  SITE_NAME="${DDEV_PROJECT:-$(grep 'project:' ${DDEV_APPROOT}/.ddev/providers/pantheon.yaml | cut -d: -f2 | cut -d. -f1 | xargs)}"
  
  # Set the site environment for backup operations.
  if [ "$ENVIRONMENT" != "dev" ]; then
    SITE_ENV="${SITE_NAME}.${ENVIRONMENT}"
    PULL_ENV_FLAG="--environment=project=${SITE_NAME}.${ENVIRONMENT}"
  else
    SITE_ENV="${SITE_NAME}.dev"
    PULL_ENV_FLAG=""
  fi
  
  echo "Checking for database backup on ${SITE_ENV}..."
  
  # Check if there's a database backup and get its timestamp.
  LATEST_BACKUP_TIMESTAMP=$(ddev exec bash -c "terminus backup:list ${SITE_ENV} --element=database --format=list --field=date" 2>/dev/null | head -1)
  
  # Calculate current time and 12-hour threshold.
  CURRENT_TIME=$(date +%s)
  TWELVE_HOURS_AGO=$((CURRENT_TIME - 43200))  # 12 hours = 43200 seconds
  
  CREATE_NEW_BACKUP=false
  
  # Check if force flag is set
  if [ "$FORCE_BACKUP" = true ]; then
    echo -e "${yellow}Force flag detected. Creating new backup regardless of age.${NC}"
    CREATE_NEW_BACKUP=true
  elif [ -z "$LATEST_BACKUP_TIMESTAMP" ]; then
    echo -e "${yellow}No database backup found.${NC}"
    CREATE_NEW_BACKUP=true
  else
    # Extract integer part of timestamp for comparison
    BACKUP_TIME=${LATEST_BACKUP_TIMESTAMP%.*}
    
    if [ "$BACKUP_TIME" -lt "$TWELVE_HOURS_AGO" ]; then
      BACKUP_AGE_HOURS=$(( (CURRENT_TIME - BACKUP_TIME) / 3600 ))
      echo -e "${yellow}Latest backup is ${BACKUP_AGE_HOURS} hours old (older than 12 hours).${NC}"
      CREATE_NEW_BACKUP=true
    else
      BACKUP_AGE_HOURS=$(( (CURRENT_TIME - BACKUP_TIME) / 3600 ))
      echo -e "${green}Recent backup found (${BACKUP_AGE_HOURS} hours old): ${LATEST_BACKUP_TIMESTAMP}${NC}"
    fi
  fi
  
  if [ "$CREATE_NEW_BACKUP" = true ]; then
    echo -e "${yellow}Creating new backup for ${SITE_ENV}...${NC}"
    if ddev exec bash -c "terminus backup:create ${SITE_ENV} --element=database -y"; then
      echo -e "${green}Backup created successfully.${NC}"
      # Wait a moment for the backup to be processed
      echo "Waiting for backup to complete..."
      sleep 10
    else
      echo -e "${red}Failed to create backup for ${SITE_ENV}. Exiting.${NC}"
      exit 1
    fi
  fi
  
  # Now perform the pull operation
  if [ -n "$PULL_ENV_FLAG" ]; then
    ddev pull pantheon --skip-files -y $PULL_ENV_FLAG
  else
    ddev pull pantheon --skip-files -y
  fi

  echo -e "Update Drupal DB"
  ddev drush updatedb -y

  echo -e "Clear cache"
  ddev drush cr -y

  echo "Add Cypress users"
  ddev cypress-users
else
  echo -e "\n${yellow} No config, installing Drupal. ${NC}"
  echo -e "${green}${divider}${NC}"
  ddev drush si -y minimal
fi
